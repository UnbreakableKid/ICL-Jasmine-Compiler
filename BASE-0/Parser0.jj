PARSER_BEGIN(Parser)

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

/** ID lister. */
public class Parser {

  static final String DEFAULT_FOLDER = "BASE-0/files/%s.txt";

  /** Main entry point. */
  public static void main(String []args) {

        String filename = null;

        switch(args.length){
        case 0: break;
        case 1:
            System.out.println("Wrong arguments: "+args[0]+".\nTry '-c File_Name' to compile or just run to interpreter.");
            System.exit(1);
        case 2:
            if(!args[0].equalsIgnoreCase("-c") ){
                System.out.println("Flag '-c' expected to compile, but "+args[0]+" received");
                System.exit(1);
            }
            filename = String.format(DEFAULT_FOLDER,args[1]);
            break;
        default:
            System.out.println("Wrong arguments.\nTry '-c File_Name' to compile or just run to interpreter.");
            System.exit(1);
        }

        Parser parser;

        if(filename != null){
            try{
                parser = new Parser(new FileInputStream(filename));
            }
            catch(FileNotFoundException e){
                System.out.println(e.getMessage());
                System.exit(1);
                return;
            }
            compiler(parser,args[1]);
        }
        else{
            parser = new Parser(System.in);
            interpreter(parser);
        }
  }

  private static void compiler(Parser parser, String filename){
        Environment<Integer> env = new Environment<>();
        ASTNode exp;
        CodeBlock codeBlock = new CodeBlock();
        try{
            exp = parser.Start();
            exp.compile(codeBlock, env);
            codeBlock.dump(filename);
            //codeBlock.code.clear();
        }catch(Exception e) {System.out.println("Syntax Error!");}
  }

  private static void interpreter(Parser parser){
        Environment<Integer> env = new Environment<>();
        ASTNode exp;
        while(true){
            try{
                exp = parser.Start();
                System.out.println(exp.eval(env));
            } catch(Exception e){
                System.out.println("Syntax Error!");
                parser.ReInit(System.in);
            }
        }
  }
}

PARSER_END(Parser)

SKIP :
{
     "\t"
   | "\r"
   | " "

}

TOKEN :
{
  <Def : "def">
  |
  < In: "in" >
  |
  < End: "end" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  <EL : "\n">
  |
  < EQ: "=" >

}

ASTNode Start():
{ ASTNode t;}
{
   t = Exp()  (<EOF> | <EL>)
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term()
                 { if (op.kind == PLUS) 
                        t1 = new ASTPlus(t1,t2);
                   else
                        t1 = new ASTMinus(t1,t2);
                 } 
               )*
     { return t1; } 
}

ASTNode Term() :
{
 Token op;
 ASTNode t1, t2;
}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Fact()
 		 {
              if (op.kind == TIMES)
                  t1 = new ASTMul(t1,t2);
              else
                  t1 = new ASTDiv(t1,t2);
         }
		)*


     { return t1; } 
}

ASTNode Fact() :{
  Token n, m;
  ASTNode t, t1, t2;
  Map<String, ASTNode> vars = new HashMap<>();
}
    {

        (

        <MINUS> n=<Num> {
                int z = Integer.parseInt(n.image);
                t = new ASTNum(-z);

        }

        | n=<Num> {
            t = new ASTNum(Integer.parseInt(n.image));
        }
        | n=<Id> {

          t = new ASTId(n.image);
        }

        |
         <Def> (n = <Id> <EQ> t1 = Exp()  {vars.put(n.image, t1);}) +  <In> t2 = Exp() <End> {

          t = new ASTDef(vars, t2);
        }

        | <LPAR> t=Exp() <RPAR> )
        { return t; }

    }
