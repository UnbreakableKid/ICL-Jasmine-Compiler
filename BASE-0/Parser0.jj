PARSER_BEGIN(Parser)


/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
            Environment e = new Environment();
            exp = parser.Start(e);
            System.out.println(exp.eval(e));
        } catch (Exception e) {
          System.out.println ("Syntax Error!");
          parser.ReInit(System.in);
        }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  <Def : "def">
  |
  < In: "in" >
  |
  < End: "end" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < EQ: "=" >

}

ASTNode Start(Environment e):
{ ASTNode t;

 e.beginScope();

}
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                        t1 = new ASTPlus(t1,t2);
                   else
                        t1 = new ASTMinus(t1,t2);
                 } 
               )*
     { return t1; } 
}

ASTNode Term() :
{
 Token op;
 ASTNode t1, t2;
}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term() 
 		 {
              if (op.kind == TIMES)
                  t1 = new ASTMul(t1,t2);
              else
                  t1 = new ASTDiv(t1,t2);
         }
		)?
     { return t1; } 
}


ASTNode Fact() :{
    Token n, m;
    ASTNode t, t1, t2;
  }
    {

        (



        <MINUS> n=<Num> {
                int z = Integer.parseInt(n.image);
                t = new ASTNum(-z);

        }

        | n=<Num> {
            t = new ASTNum(Integer.parseInt(n.image));
        }
        | n=<Id> {

          t = new ASTId(n.image);
        }

        |

         <Def> (n = <Id> <EQ> t1 = Exp())+ <In> t2 = Exp() <End> {

          t = new ASTDef(n.image, t1, t2);
        }

        | <LPAR> t=Exp() <RPAR> )
        { return t; }

    }
